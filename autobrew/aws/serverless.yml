
service: autobrew-brews
app: autobrew

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  memorySize: 128

  stage: ${opt:stage, 'uat'}
  region: #{AWS::Region}
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ''
            - - 'https://cognito-idp.'
              - '#{AWS::Region}'
              - '.amazonaws.com/eu-west-1_k4rFWLDKO'
        audience:
          - 64k4n04qv28q032ma70e0shf4b

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamoDB:PutItem
        - dynamoDB:Scan
        - dynamoDB:GetItem
        - dynamoDB:UpdateItem
        - dynamoDB:DeleteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.BREW_TABLE}
    - Effect: "Allow"
      Action:
        - dynamoDB:PutItem
        - dynamoDB:Scan
        - dynamoDB:GetItem
        - dynamoDB:UpdateItem
        - dynamoDB:DeleteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.MEASUREMENT_TABLE}


# you can define service wide environment variables here
  environment:
    BREW_TABLE: autobrew_brews_${opt:stage, 'uat'}
    MEASUREMENT_TABLE: autobrew_measurement_series_${opt:stage, 'uat'}
    DOMAIN_SUFFIX: palspetprojects

# you can add packaging information here
package:
  individually: false
  exclude:
    - test_*
    - test/**
    - test_utils/**
    - package.json
    - package-lock.json
    - node_modules/**

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
functions:
  getAllBrews:
    handler: handler.get_brews
    events:
      - httpApi:
          method: get
          path: /brew
  getBrew:
    handler: handler.get_brew
    events:
      - httpApi:
          method: get
          path: /brew/{brew_remote_id}
  createBrew:
    handler: handler.create_brew
    events:
      - httpApi:
          method: post
          path: /brew
  updateBrew:
    handler: handler.update_brew
    events:
      - httpApi:
          method: put
          path: /brew/{brew_remote_id}
  deleteBrew:
    handler: handler.delete_brew
    events:
      - httpApi:
          method: delete
          path: /brew/{brew_remote_id}

  getAllMeasurements:
    handler: handler.get_all_measurement_series
    events:
      - httpApi:
          method: get
          path: /measurements
  getMeasurement:
    handler: handler.get_measurement_series
    events:
      - httpApi:
          method: get
          path: /brew/{brew_remote_id}/measurements/{source_name}
  getMeasurementForBrew:
    handler: handler.get_measurement_series_for_brew
    events:
      - httpApi:
          method: get
          path: /brew/{brew_remote_id}/measurements
  createMasurements:
    handler: handler.create_measurements
    events:
      - httpApi:
          method: post
          path: /measurements
  updateMeasurements:
    handler: handler.update_measurements
    events:
      - httpApi:
          method: put
          path: /brew/{brew_remote_id}/measurements/{source_name}
  deleteMeasurements:
    handler: handler.delete_measurements
    events:
      - httpApi:
          method: delete
          path: /brew/{brew_remote_id}/measurements/{source_name}

#    Define function environment variables here
#    environment:
#      variable2: value2
#Resources:


# you can add CloudFormation resource templates here
resources:
  Resources:
    brewTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BREW_TABLE}
        AttributeDefinitions:
          - AttributeName: remote_id
            AttributeType: S
        KeySchema:
          - AttributeName: remote_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    measurementSeriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MEASUREMENT_TABLE}
        AttributeDefinitions:
          - AttributeName: brew_remote_id
            AttributeType: S
          - AttributeName: source_name
            AttributeType: S
        KeySchema:
          - AttributeName: brew_remote_id
            KeyType: HASH
          - AttributeName: source_name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
