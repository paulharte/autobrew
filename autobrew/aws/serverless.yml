
service: autobrew-brews
app: autobrew

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  memorySize: 128

  stage: ${opt:stage}
  region: eu-west-1
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.#{AWS::Region}.amazonaws.com/#{AWS::Region}_k4rFWLDKO
        audience:
          - 64k4n04qv28q032ma70e0shf4b

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamoDB:PutItem
            - dynamoDB:Scan
            - dynamoDB:GetItem
            - dynamoDB:UpdateItem
            - dynamoDB:DeleteItem
            - dynamoDB:Query
          Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.BREW_TABLE}
        - Effect: "Allow"
          Action:
            - dynamoDB:PutItem
            - dynamoDB:Scan
            - dynamoDB:GetItem
            - dynamoDB:UpdateItem
            - dynamoDB:DeleteItem
            - dynamoDB:Query
          Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.MEASUREMENT_TABLE}


# you can define service wide environment variables here
  environment:
    BREW_TABLE: autobrew_brews_${opt:stage}
    MEASUREMENT_TABLE: autobrew_measurement_series_${opt:stage}
    STAGE: ${opt:stage}

custom:
  url:
    uat: autobrew-uat.paulspetprojects.net
    prod: autobrew.paulspetprojects.net


# you can add packaging information here
package:
  individually: false
  exclude:
    - test_*
    - test/**
    - test_utils/**
    - package.json
    - package-lock.json
    - node_modules/**

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements

functions:
  getAllBrews:
    handler: handler.get_brews
    events:
      - httpApi:
          method: get
          path: /brew
  getBrew:
    handler: handler.get_brew
    events:
      - httpApi:
          method: get
          path: /brew/{brew_remote_id}
  createBrew:
    handler: handler.create_brew
    events:
      - httpApi:
          method: post
          path: /brew
          authorizer: serviceAuthorizer
  updateBrew:
    handler: handler.update_brew
    events:
      - httpApi:
          method: put
          path: /brew/{brew_remote_id}
          authorizer: serviceAuthorizer
  deleteBrew:
    handler: handler.delete_brew
    events:
      - httpApi:
          method: delete
          path: /brew/{brew_remote_id}
          authorizer: serviceAuthorizer

  getAllMeasurements:
    handler: handler.get_all_measurement_series
    events:
      - httpApi:
          method: get
          path: /measurements
  getMeasurement:
    handler: handler.get_measurement_series
    events:
      - httpApi:
          method: get
          path: /brew/{brew_remote_id}/measurements/{source_name}
  getMeasurementForBrew:
    handler: handler.get_measurement_series_for_brew
    events:
      - httpApi:
          method: get
          path: /brew/{brew_remote_id}/measurements
  createMasurements:
    handler: handler.create_measurements
    events:
      - httpApi:
          method: post
          path: /measurements
          authorizer: serviceAuthorizer
  updateMeasurements:
    handler: handler.update_measurements
    events:
      - httpApi:
          method: put
          path: /brew/{brew_remote_id}/measurements/{source_name}
          authorizer: serviceAuthorizer
  deleteMeasurements:
    handler: handler.delete_measurements
    events:
      - httpApi:
          method: delete
          path: /brew/{brew_remote_id}/measurements/{source_name}
          authorizer: serviceAuthorizer

#    Define function environment variables here
#    environment:
#      variable2: value2
#Resources:


# you can add CloudFormation resource templates here
resources:
  Resources:
    brewTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BREW_TABLE}
        AttributeDefinitions:
          - AttributeName: remote_id
            AttributeType: S
        KeySchema:
          - AttributeName: remote_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    measurementSeriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MEASUREMENT_TABLE}
        AttributeDefinitions:
          - AttributeName: brew_remote_id
            AttributeType: S
          - AttributeName: source_name
            AttributeType: S
        KeySchema:
          - AttributeName: brew_remote_id
            KeyType: HASH
          - AttributeName: source_name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    uiHostingBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.url.${opt:stage}}
        WebsiteConfiguration:
          ErrorDocument: error.html
          IndexDocument: index.html
        AccessControl: PublicRead
        VersioningConfiguration:
          Status: Suspended
        MetricsConfigurations:
          - Id: EntireBucket
    uiBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref uiHostingBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref uiHostingBucket
                  - /*



  Outputs:
    WebsiteURL:
      Value: !GetAtt
        - uiHostingBucket
        - WebsiteURL
      Description: URL for website hosted on S3
    S3BucketSecureURL:
      Value: !Join
        - ''
        - - 'https://'
          - !GetAtt
            - uiHostingBucket
            - DomainName
      Description: Name of S3 bucket to hold website content
